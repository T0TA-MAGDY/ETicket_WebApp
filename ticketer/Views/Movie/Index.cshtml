@using System.Security.Claims
@using ticketer.Data.Enums
@model IEnumerable<Movie>
@{
    ViewData["Title"] = "List of Movies";
    var hasSearchOrFilter =
      Context?.Request?.Query.ContainsKey("searchString") == true ||
      Context?.Request?.Query.ContainsKey("filter") == true ||
        Context?.Request?.Query.ContainsKey("Category") == true;

var movieList = Model?.OrderByDescending(m => m.ReleaseDate).ToList() ?? new List<Movie>();
    var userFavorites = ViewBag.UserFavorites as List<int> ?? new List<int>();
}

<link rel="stylesheet" href="~/css/movie.css" />


@if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
{
    <div class="add-movie-fixed">
        <a asp-action="Add" class="btn btn-black">➕ Add New Movie</a>
    </div>
}
@if (!hasSearchOrFilter)

{
    <div class="intro-section">
        <div class="intro-text">
            <h1 class="hover-zoom">Welcome to Ticketer</h1>
            <p class="hover-zoom">
                your go-to platform for booking movie tickets across different cinemas.
                Explore the latest releases, watch trailers, and choose your seat — all in one place. Fast, easy,
                and always up to date with the newest films.
                Skip the lines and enjoy the big screen hassle-free!
            </p>
        </div>
        <div class="intro-image hover-zoom">
            <img src="/img/ahmedhelmy.png" alt="actor" />
        </div>
    </div>

    @if (movieList.Count > 1)
    {
        var secondItem = movieList[5];

        <h2 class="now-showing-title hover-zoom">Now Showing</h2>

        <div class="featured-movie hover-zoom">
            <a href="@Url.Action("showdetails", new { id = secondItem.Id })">
                <img src="@secondItem.ImageURL" alt="@secondItem.Name" />
                <div class="movie-name-overlay">@secondItem.Name</div>
            </a>
        </div>
    }
}



<div class="movies-container">
    @foreach (var item in movieList)
    {
        <div class="movie-item-wrapper">
            <a href="@Url.Action("showdetails", new { id = item.Id })" class="movie-item hover-zoom">
                <img src="@item.ImageURL" alt="@item.Name" />
                <div class="movie-info">
                    <p><strong>@item.Name</strong></p>
                </div>
            </a>
            <button class="heart-button @(userFavorites.Contains(item.Id) ? "active" : "")"
                    data-movie-id="@item.Id"
                    aria-label="Like"
                    onclick="toggleHeart(this)">
                <i class="fa-@(userFavorites.Contains(item.Id) ? "solid" : "regular") fa-heart"></i>
            </button>



        </div>
    }
</div>



    @section Scripts {
    <script>
        // Toggle heart button on click and call backend
        async function toggleHeart(button) {
            const movieId = button.getAttribute("data-movie-id");
            const icon = button.querySelector('i');

            const response = await fetch("/Favorite/Toggle", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ movieId: movieId })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.favorited) {
                    button.classList.add("active");
                    icon.classList.remove("fa-regular");
                    icon.classList.add("fa-solid");
                } else {
                    button.classList.remove("active");
                    icon.classList.remove("fa-solid");
                    icon.classList.add("fa-regular");
                }
            }
        }

        // Initialize hearts on page load based on user favorites (if any)
        window.addEventListener('DOMContentLoaded', () => {
            const favorites = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(userFavorites));

            favorites.forEach(id => {
                const button = document.querySelector(`.heart-button[data-movie-id="${id}"]`);
                if (button) {
                    button.classList.add("active");
                    const icon = button.querySelector('i');
                    icon.classList.remove("fa-regular");
                    icon.classList.add("fa-solid");
                }
            });

            const container = document.querySelector('.movies-container');
            if (container && container.children.length === 5) {
                container.classList.add('centered');
            } else {
                container?.classList.remove('centered');
            }
        });
    </script>
}

    <script src="~/js/main.js"></script>
}

 